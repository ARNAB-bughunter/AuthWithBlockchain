from datetime import datetime
from web3 import Web3
import json
from django.conf import settings

class myBlockchain():
    def __init__(self):
        self.BLOCKCHAIN_URL = settings.BLOCKCHAIN_URL
        self.contract=None
        
    def deployContract(self):
        web = Web3(Web3.HTTPProvider(self.BLOCKCHAIN_URL))
        web.eth.default_account = web.eth.accounts[0]
        abi = json.loads('[{"constant":true,"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"productList","outputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"string","name":"username","type":"string"},{"internalType":"string","name":"date","type":"string"},{"internalType":"string","name":"time","type":"string"},{"internalType":"string","name":"city","type":"string"},{"internalType":"string","name":"country","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"string","name":"_username","type":"string"},{"internalType":"string","name":"_date","type":"string"},{"internalType":"string","name":"_time","type":"string"},{"internalType":"string","name":"_city","type":"string"},{"internalType":"string","name":"_country","type":"string"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]')
        bytecode = '0x60806040526000805534801561001457600080fd5b50610c8c806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd14610046578063104ace0214610064578063528c87d214610412575b600080fd5b61004e6106d5565b6040518082815260200191505060405180910390f35b610410600480360360c081101561007a57600080fd5b810190808035906020019064010000000081111561009757600080fd5b8201836020820111156100a957600080fd5b803590602001918460018302840111640100000000831117156100cb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561012e57600080fd5b82018360208201111561014057600080fd5b8035906020019184600183028401116401000000008311171561016257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101c557600080fd5b8201836020820111156101d757600080fd5b803590602001918460018302840111640100000000831117156101f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561025c57600080fd5b82018360208201111561026e57600080fd5b8035906020019184600183028401116401000000008311171561029057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102f357600080fd5b82018360208201111561030557600080fd5b8035906020019184600183028401116401000000008311171561032757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561038a57600080fd5b82018360208201111561039c57600080fd5b803590602001918460018302840111640100000000831117156103be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106db565b005b61043e6004803603602081101561042857600080fd5b81019080803590602001909291905050506107e6565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b83811015610492578082015181840152602081019050610477565b50505050905090810190601f1680156104bf5780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b838110156104f85780820151818401526020810190506104dd565b50505050905090810190601f1680156105255780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b8381101561055e578082015181840152602081019050610543565b50505050905090810190601f16801561058b5780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b838110156105c45780820151818401526020810190506105a9565b50505050905090810190601f1680156105f15780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b8381101561062a57808201518184015260208101905061060f565b50505050905090810190601f1680156106575780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b83811015610690578082015181840152602081019050610675565b50505050905090810190601f1680156106bd5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b60005481565b60008081548092919060010191905055506040518060c001604052808781526020018681526020018581526020018481526020018381526020018281525060016000805481526020019081526020016000206000820151816000019080519060200190610749929190610bb2565b506020820151816001019080519060200190610766929190610bb2565b506040820151816002019080519060200190610783929190610bb2565b5060608201518160030190805190602001906107a0929190610bb2565b5060808201518160040190805190602001906107bd929190610bb2565b5060a08201518160050190805190602001906107da929190610bb2565b50905050505050505050565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109305780601f1061090557610100808354040283529160200191610930565b820191906000526020600020905b81548152906001019060200180831161091357829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b0a5780601f10610adf57610100808354040283529160200191610b0a565b820191906000526020600020905b815481529060010190602001808311610aed57829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ba85780601f10610b7d57610100808354040283529160200191610ba8565b820191906000526020600020905b815481529060010190602001808311610b8b57829003601f168201915b5050505050905086565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bf357805160ff1916838001178555610c21565b82800160010185558215610c21579182015b82811115610c20578251825591602001919060010190610c05565b5b509050610c2e9190610c32565b5090565b610c5491905b80821115610c50576000816000905550600101610c38565b5090565b9056fea265627a7a72315820eb822e6e07d5ada45d01753b3664c5312bf29a03ea63c98b8b99587a26985f6c64736f6c63430005110032'
        
        Auth = web.eth.contract(abi=abi,bytecode=bytecode)
        tx_hash = Auth.constructor().transact()
        tx_receipt = web.eth.waitForTransactionReceipt(tx_hash)
        self.contract=web.eth.contract(
            address=tx_receipt.contractAddress,
            abi=abi
        )

    def registerProduct(self,id,username,city,country):
        self.contract.functions.register(id,username,datetime.now().strftime('%d:%m:%y'),datetime.now().strftime('%H:%M:%S'),city,country).transact()
        
    def aboutProduct(self,id):
        productList=[]
        for i in range(1,self.contract.functions.count().call()+1):
            if self.contract.functions.productList(i).call()[0]==str(id):
                productList.append(self.contract.functions.productList(i).call())
        return productList

